version: '3.9'

services:

  redis:
    image: redis:6.2-alpine
    container_name: redis
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    sysctls:
      net.core.somaxconn: 1024
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - default
    volumes:
      - redis-vol:/data
    command: redis-server --requirepass ${ROOT_PASSWORD} --appendonly yes --daemonize no

  mongo:
    container_name: mongo
    image: mongo:4.4
    restart: unless-stopped
    environment:
      TZ: ${TZ}
      MONGO_INITDB_ROOT_USERNAME: ${ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${ROOT_PASSWORD}
    ports:
      - "${MONGO_PORT}:27017"
    networks:
      - default
    volumes:
      - mongodb-vol:/data/db

  mysql:
    container_name: mysql
    image: mysql:8.0.26
    environment:
      TZ: ${TZ}
      MYSQL_ROOT_PASSWORD: ${ROOT_PASSWORD}
      MYSQL_DATABASE: grafana
    privileged: true
    restart: unless-stopped
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - default
    command:
      --default-authentication-plugin=mysql_native_password
    volumes:
      - mysql-vol:/var/lib/mysql

  consul:
    container_name: consul
    image: consul
    restart: unless-stopped
    ports:
      - "8500:8500"
    networks:
      - default
    command: [ "consul","agent","-dev","-bootstrap","-data-dir","/consul/data","-ui","-bind","127.0.0.1","-client","0.0.0.0" ]
    volumes:
      - consul-vol:/consul/data

  zookeeper:
    image: zookeeper:latest
    container_name: zookeeper
    hostname: zookeeper
    restart: unless-stopped
    environment:
      TZ: ${TZ}
      ZOO_MY_ID: 1
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    networks:
      - default
    volumes:
      - zookeeper-vol:/data

  zkui:
    image: juris/zkui
    container_name: zkui
    hostname: zkui
    restart: unless-stopped
    privileged: true
    environment:
      TZ: ${TZ}
      ZK_SERVER: zookeeper:2181
    ports:
      - "39001:9090"
    networks:
      - default
    depends_on:
      - zookeeper


  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:management-alpine
    hostname: rabbitmq
    environment:
      TZ: ${TZ}
      RABBITMQ_DEFAULT_USER: ${ROOT_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${ROOT_PASSWORD}
    restart: unless-stopped
    ports:
      - "${RABBITMQ_PORT}:15672"
      - "5672:5672"
    networks:
      - default
    volumes:
      - rabbitmq-vol:/var/lib/rabbitmq

  nats:
    container_name: nats
    image: nats:alpine
    restart: unless-stopped
    ports:
      - "4222:4222"
      - "8222:8222"
    networks:
      - default
    command: nats-server -m 8222 --user ${ROOT_USERNAME} --pass ${ROOT_PASSWORD}

  nats-streaming:
    image: nats-streaming:alpine
    container_name: nats-streaming
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    ports:
      - "4223:4222"
      - "8223:8222"
    networks:
      - default
    command: nats-streaming-server -m 8222 --user ${ROOT_USERNAME} --pass ${ROOT_PASSWORD}

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    restart: unless-stopped
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_MESSAGE_MAX_BYTES: 10000000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 10000000
      KAFKA_GROUP_MAX_SESSION_TIMEOUT_MS: 60000
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DELETE_RETENTION_MS: 1000
    ports:
      - "9092:9092"
    networks:
      - default
    volumes:
      - ./data/kafka:/kafka
    depends_on:
      - zookeeper

  kafka-manager:
    image: sheepkiller/kafka-manager
    container_name: kafka-manager
    restart: unless-stopped
    environment:
      ZK_HOSTS: zookeeper:2181
      KAFKA_BROKERS: kafka:9092
      KM_ARGS: -Djava.net.preferIPv4Stack=true
    ports:
      - "39000:9000"
    networks:
      - default
    depends_on:
      - zookeeper
      - kafka

  elasticsearch:
    image:  docker.elastic.co/elasticsearch/elasticsearch:7.15.2
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      TZ: ${TZ}
      ELASTIC_USERNAME: elastic
      ELASTIC_PASSWORD: secret
      ES_JAVA_OPTS: -Xms256m -Xmx256m
      node.name: es-node
      discovery.type: single-node
      bootstrap.memory_lock: "true"
    networks:
      - default
    ports:
      - "9200:9200"
      - "9300:9300"

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:latest
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    networks:
      - default

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    hostname: prometheus
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    volumes:
      - ./conf/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - default

  grafana:
    image: grafana/grafana
    container_name: grafana
    hostname: grafana
    restart: unless-stopped
    privileged: true
    environment:
      TZ: ${TZ}
      GF_SECURITY_ADMIN_USER: ${ROOT_USERNAME}
      GF_SECURITY_ADMIN_PASSWORD: ${ROOT_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: 'false'
      GF_DATABASE_HOST: mysql:3306
      GF_DATABASE_NAME: grafana
      GF_DATABASE_USER: root
      GF_DATABASE_PASSWORD: ${ROOT_PASSWORD}
      GF_DATABASE_TYPE: mysql
    ports:
      - "33000:3000"
    networks:
      - default
    volumes:
      - grafana-vol:/var/lib/grafana

  vault:
    container_name: vault
    image: vault:latest
    restart: unless-stopped
    environment:
      TZ: ${TZ}
      VAULT_DEV_ROOT_TOKEN_ID: ${ROOT_PASSWORD}
    cap_add:
      - IPC_LOCK
    ports:
      - "${VAULT_PORT}:8200"
    networks:
      - default

volumes:
  redis-vol:
    driver: local
    name: redis-volume
  mysql-vol:
    driver: local
    name: mysql-volume
  mongodb-vol:
    driver: local
    name: mongodb-volume
  consul-vol:
    driver: local
    name: consul-volume
  rabbitmq-vol:
    driver: local
    name: rabbitmq-volume
  zookeeper-vol:
    driver: local
    name: zookeeper-volume
  grafana-vol:
    driver: local
    name: grafana-volume

networks:
  default:
    external: true
    name: ${NETWORKS_NAME}
